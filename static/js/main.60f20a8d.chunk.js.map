{"version":3,"sources":["Components/ToDo.js","Components/NewTodo.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","className","onSubmit","type","onChange","completed","onClick","class","Component","NewTodo","handleSubmit","createTodo","uuidv4","placeholder","TodoList","todos","create","remove","update","toggleCompletion","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60f20a8d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./css/todo.css\"\r\n\r\nexport default class ToDo extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isEditing:false,\r\n            task:this.props.task\r\n        }\r\n        this.handleRemove=this.handleRemove.bind(this);\r\n        this.toggleForm=this.toggleForm.bind(this);\r\n        this.handleUpdate=this.handleUpdate.bind(this);\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleToggle=this.handleToggle.bind(this);\r\n\r\n    }\r\n    handleRemove(){\r\n        this.props.removeTodo(this.props.id)\r\n    }\r\n    toggleForm(){\r\n        this.setState({\r\n            isEditing: !this.state.isEditing\r\n        });\r\n    }\r\n    handleUpdate(evt){\r\n        evt.preventDefault();\r\n        // take new task data and pass to the parent\r\n        this.props.updateTodo(this.props.id, this.state.task)\r\n        this.setState({\r\n            isEditing:false\r\n        })\r\n    }\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]:evt.target.value\r\n        })\r\n    }\r\n    handleToggle(evt){\r\n        this.props.toggleTodo(this.props.id)\r\n    }\r\n    render(){\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result=(\r\n                <div className=\"todo\">\r\n                    <form onSubmit={this.handleUpdate} className='todo-edit-form'>\r\n                        <input \r\n                            type=\"text \" \r\n                            value={this.state.task} \r\n                            name=\"task\"\r\n                            onChange={this.handleChange} \r\n                        />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            result=(\r\n                <div className=\"todo\">\r\n                    <li className={this.props.completed ? \" todo-task completed\" : \"todo-task\"}\r\n                        onClick={this.handleToggle}\r\n                    >\r\n                        {this.props.task}\r\n                    </li>\r\n                    <div className=\"todo-buttons\">\r\n                        <button onClick={this.toggleForm}>\r\n                            <i class=\"fas fa-pen\" />\r\n                        </button>\r\n                        <button onClick={this.handleRemove} >\r\n                            <i class=\"fas fa-trash\" />  \r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            result \r\n        )\r\n        \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport \"./css/newtodo.css\";\r\n\r\nclass NewTodo extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={task:\"\"}\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]:evt.target.value\r\n        })\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.createTodo({...this.state, id:uuidv4(),completed:false})\r\n        this.setState({task:\"\"})\r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.handleSubmit} className=\"newtodo\">\r\n                <label>New Todo</label>\r\n                <input \r\n                    placeholder=\"New Todo\"\r\n                    type=\"text\"\r\n                    id=\"task\"\r\n                    name=\"task\"\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button>Add Todo</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTodo;","import React, { Component } from 'react';\r\nimport ToDo from \"./ToDo\";\r\nimport NewTodo from \"./NewTodo\";\r\nimport \"./css/todolist.css\"\r\n\r\nclass TodoList extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={todos:[]}\r\n        this.create=this.create.bind(this);\r\n        this.remove=this.remove.bind(this);\r\n        this.update=this.update.bind(this);\r\n        this.toggleCompletion=this.toggleCompletion.bind(this);\r\n    }\r\n    create(NewTodo){\r\n        this.setState({\r\n            todos:[...this.state.todos, NewTodo]\r\n        })\r\n    }\r\n    remove(id){\r\n        this.setState({\r\n            todos:this.state.todos.filter(t => t.id !== id)\r\n        })\r\n    }\r\n    update(id, updatedTask){\r\n        const updatedTodos=this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return{ ...todo,task: updatedTask}\r\n            }\r\n            return todo\r\n        })\r\n        this.setState({\r\n            todos: updatedTodos\r\n        })\r\n    }\r\n\r\n    toggleCompletion(id){\r\n        const updatedTodos=this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return{ ...todo,completed: !todo.completed}\r\n            }\r\n            return todo\r\n        })\r\n        this.setState({\r\n            todos: updatedTodos\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const todos=this.state.todos.map(todo =>{\r\n            return <ToDo \r\n                        key={todo.id} \r\n                        task={todo.task} \r\n                        id={todo.id} \r\n                        removeTodo={this.remove}\r\n                        updateTodo={this.update}\r\n                        completed={todo.completed}\r\n                        toggleTodo={this.toggleCompletion}\r\n                    />\r\n        })\r\n        return(\r\n            <div className=\"todolist\">\r\n                <h1>Todo List!\r\n                    <span>A simple React Todo List App</span>\r\n                </h1>\r\n                <ul>\r\n                    {todos}\r\n                </ul>\r\n                <NewTodo createTodo={this.create}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from \"./Components/TodoList\"\n\nfunction App() {\n  return (\n    <div >\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}